@topic=Язык программирования Python;chapter=Введение в Python;
Python представляет популярный высокоуровневый язык программирования, который предназначен для создания приложений различных типов. Это и веб-приложения, и игры, и настольные программы, и работа с базами данных. Довольно большое распространение питон получил в области машинного обучения и исследований искусственного интеллекта.
Впервые язык Python был анонсирован в 1991 году голландским разработчиком Гвидо Ван Россумом. С тех пор данный язык проделал большой путь развития. В 2000 году была издана версия 2.0, а в 2008 году - версия 3.0. Несмотря на вроде такие большие промежутки между версиями постоянно выходят подверсии. Так, текущей актуальной версией на момент написания данного материала является 3.10, которая вышла в октябре 2021 года.
Основные особенности языка программирования Python:
-Скриптовый язык. Код программ определяется в виде скриптов.
-Поддержка самых различных парадигм программирования, в том числе объектно-ориентированной и функциональной парадигм.
-Интерпретация программ. Для работы со скриптами необходим интерпретатор, который запускает и выполняет скрипт.
-Портативность и платформонезависимость. Не имеет значения, какая у нас операционная система - Windows, Mac OS, Linux, нам достаточно написать скрипт, который будет запускаться на всех этих ОС при наличии интерпретатора
-Автоматическое управление памяти
-Динамическая типизация
Python - очень простой язык программирования, он имеет лаконичный и в то же время довольно простой и понятный синтаксис. Соответственно его легко изучать, и собственно это одна из причин, по которой он является одним из самых популярных языков программирования именно для обучения. В частности, в 2014 году он был признан самым популярным языком программирования для обучения в США.
Python также популярен не только в сфере обучения, но в написании конкретных программ в том числе коммерческого характера. В немалой степени поэтому для этого языка написано множество библиотек, которые мы можем использовать.
Кроме того, у данного языка программирования очень большое коммьюнити, в интернете можно найти по данному языку множество полезных материалов, примеров, получить квалифицированную помощь специалистов.
@
@topic=Первая программа на Python;chapter=Введение в Python;
После установки интерпретатора, как было описано в прошлой теме, мы можем начать создавать приложения на Python. Итак, создадим первую простенькую программу.
Как было сказано в прошлой теме, программа интерпретатора, если при установке не был изменен адрес, по умолчанию устанавливается на Linux по пути usr/local/bin/python310, а на Windows по пути C:\Users\[имя_пользователя]\AppData\Local\Programs\Python\Python310\ и представляет файл под названием python.exe.
Запустим интерпретатор и введем в него следующую строку:
#print("hello world")
И консоль выведет строку "hello world".
Для этой программы использовалась функция print(), которая выводит некоторую строку на консоль.
В реальности, как правило, программы определяются во внешних файлах-скриптах и затем передаются интерпретатору на выполнение. Поэтому создадим файл программы. Для этого на диске C или где-нибудь в другом месте файловой системы определим для скриптов папку python. А в этой папке создадим новый текстовый файл, который назовем hello.py. По умолчанию файлы с кодом на языке Python, как правило, имеют расширение py.
Откроем этот файл в любом текстовом редакторе и добавим в него следующий код:
#name = input("Введите имя: ")
#print("Привет,", name)
Скрипт состоит из двух строк. Первая строка с помощью функции input() ожидает ввода пользователем своего имени. Введенное имя затем попадает в переменную name.
Вторая строка с помощью функции print() выводит приветствие вместе с введенным именем.
Теперь запустим командную строку/терминал и с помощью команды cd перейдем к папке, где находится файл с исходным кодом hello.py и выполним его с помощью команды python hello.py.
В итоге программа выведет приглашение к вводу имени, а затем приветствие.
@
@topic=Введение в написание программ;chapter=Основы Python;
Программа на языке Python состоит из набора инструкций. Каждая инструкция помещается на новую строку. Например:
#print(2 + 3) 
#print("Hello")
Большую роль в Python играют отступы. Неправильно поставленный отступ фактически является ошибкой. Например, в следующем случае мы получим ошибку, хотя код будет практически аналогичен приведенному выше:
#print(2 + 3) 
#    print("Hello")
Поэтому стоит помещать новые инструкции сначала строки. В этом одно из важных отличий пайтона от других языков программирования, как C# или Java.
Однако стоит учитывать, что некоторые конструкции языка могут состоять из нескольких строк. Например, условная конструкция if:
#if 1 < 2:
#    print("Hello")
В данном случае если 1 меньше 2, то выводится строка "Hello". И здесь уже должен быть отступ, так как инструкция print("Hello") используется не сама по себе, а как часть условной конструкции if. Причем отступ, согласно руководству по оформлению кода, желательно делать из такого количество пробелов, которое кратно 4 (то есть 4, 8, 16 и т.д.) Хотя если отступов будет не 4, а 5, то программа также будет работать.
Таких конструкций не так много, поэтому особой путаницы по поводу где надо, а где не надо ставить пробелы, не должно возникнуть.
Python - регистрозависимый язык, поэтому выражения print и Print или PRINT представляют разные выражения. И если вместо метода print для вывода на консоль мы попробуем использовать метод Print:
#Print("Hello World")
то у нас ничего не получится.
Для отметки, что делает тот или иной участок кода, применяются комментарии. При трансляции и выполнении программы интерпретатор игнорирует комментарии, поэтому они не оказывают никакого влияния на работу программы. Комментарии в Python бывают блочные и строчные.
Строчные коментарии предваряются знаком решетки - #. Они могут располагаться на отдельной строке:
## Вывод на консоль 
## сообщения Hello World
#print("Hello World")
Любой набор символов после знака # представляет комментарий. То есть в примее выше первые две строки кода являются комментариями.
Также они могут располагаться на той же строке, что и инструкции языка, после выполняемых инструкций:
#print("Hello World")  # Вывод сообщения на консоль
В блочных коментариях до и после текста комментария ставятся три одинарные кавычки: '''текст комментария'''. Например:
#''' 
#    Вывод на консоль
#    сообщения Hello World
#'''
#print("Hello World")
Python предоставляет ряд встроенных функций. Некоторые из них используются очень часто, особенно на начальных этапах изучения языка, поэтому рассмотрим их.
Основной функцией для вывода информации на консоль является функция print(). В качестве аргумента в эту функцию передается строка, которую мы хотим вывести:
#print("Hello Python")
Если же нам необходимо вывести несколько значений на консоль, то мы можем передать их в функцию print через запятую:
#print("Full name:", "Tom", "Smith")
В итоге все переданные значения склеятся через пробелы в одну строку:
#Full name: Tom Smith
Если функция print отвечает за вывод, то функция input отвечает за ввод информации. В качестве необязательного параметра эта функция принимает приглашение к вводу и возвращает введенную строку, которую мы можем сохранить в переменную:
#name = input("Введите имя: ")
#print("Привет", name)
Консольный вывод:
#Введите имя: Евгений
#Привет Евгений
@
@topic=Переменные и типы данных;chapter=Основы Python;
Переменные предназначены для хранения данных. Название переменной в Python должно начинаться с алфавитного символа или со знака подчеркивания и может содержать алфавитно-цифровые символы и знак подчеркивания. И кроме того, название переменной не должно совпадать с названием ключевых слов языка Python. Ключевых слов не так много, их легко запомнить:
#False      await      else       import     pass
#None       break      except     in         raise
#True       class      finally    is         return
#and        continue   for        lambda     try
#as         def        from       nonlocal   while
#assert     del        global     not        with
#async      elif       if         or         yield
Например, создадим переменную:
#name = "Tom"
Здесь определена переменная name, которая хранит строку "Tom".
В пайтоне применяется два типа наименования переменных: camel case и underscore notation.
Camel case подразумевает, что каждое новое подслово в наименовании переменной начинается с большой буквы. Например:
#userName = "Tom"
Underscore notation подразумевает, что подслова в наименовании переменной разделяются знаком подчеркивания. Например:
#user_name = "Tom"
И также надо учитывать регистрозависимость, поэтому переменные name и Name будут представлять разные объекты.
## две разные переменные
#name = "Tom"
#Name = "Tom"
Определив переменную, мы можем использовать в программе. Например, попытаться вывести ее содержимое на консоль с помощью встроенной функции print:
#name = "Tom"  # определение переменной name
#print(name)   # вывод значения переменной name на консоль
Отличительной особенностью переменной является то, что мы можем менять ее значение в течение работы программы:
#name = "Tom"  # переменной name равна "Tom"
#print(name)   # выводит: Tom
#name = "Bob"  # меняем значение на "Bob"
#print(name)   # выводит: Bob
Переменная хранит данные одного из типов данных. В Python существует множество различных типов данных. В данном случае рассмотрим только самые базовые типы: bool, int, float, complex и str.
Тип bool представляет два логических значения: True (верно, истина) или False (неверно, ложь). Значение True служит для того, чтобы показать, что что-то истинно. Тогда как значение False, наоборот, показывает, что что-то ложно. Пример переменных данного типа:
#isMarried = False
#print(isMarried)    # False
# 
#isAlive = True
#print(isAlive)      # True
Тип int представляет целое число, например, 1, 4, 8, 50. Пример
#age = 21
#print("Возраст:", age)    # Возраст: 21
# 
#count = 15
#print("Количество:", count) # Количество: 15
По умолчанию стандартные числа расцениваются как числа в десятичной системе. Но Python также поддерживает числа в двоичной, восьмеричной и шестнадцатеричной системах.
Для указания, что число представляет двоичную систему, перед числом ставится префикс 0b:
#a = 0b11
#b = 0b1011
#c = 0b100001
#print(a)    # 3 в десятичной системе
#print(b)    # 11 в десятичной системе
#print(c)    # 33 в десятичной системе
Для указания, что число представляет восьмеричную систему, перед числом ставится префикс 0o:
#a = 0o7
#b = 0o11
#c = 0o17
#print(a)    # 7 в десятичной системе
#print(b)    # 9 в десятичной системе
#print(c)    # 15 в десятичной системе
Для указания, что число представляет шестнадцатеричную систему, перед числом ставится префикс 0x:
#a = 0x0A
#b = 0xFF
#c = 0xA1
#print(a)    # 10 в десятичной системе
#print(b)    # 255 в десятичной системе
#print(c)    # 161 в десятичной системе
Стоит отметить, что в какой-бы системе мы не передали число в функцию print для вывода на консоль, оно по умолчанию будет выводиться в десятичной системе.
Тип float представляет число с плавающей точкой, например, 1.2 или 34.76. В качесте разделителя целой и дробной частей используется точка.
#height = 1.68
#pi = 3.14
#weight = 68.
#print(height)   # 1.68
#print(pi)       # 3.14
#print(weight)   # 68.0
Число с плавающей точкой можно определять в экспоненциальной записи:
#x = 3.9e3
#print(x)  # 3900.0
# 
#x = 3.9e-3
#print(x)  # 0.0039
Число float может иметь только 18 значимых символов. Так, в данном случае используются только два символа - 3.9. И если число слишком велико или слишком мало, то мы можем записывать число в подобной нотации, используя экспоненту. Число после экспоненты указывает степень числа 10, на которое надо умножить основное число - 3.9.
Тип complex представляет комплексные числа в формате вещественная_часть+мнимая_частьj - после мнимой части указывается суффикс j
#complexNumber = 1+2j
#print(complexNumber)   # (1+2j)
Тип str представляет строки. Строка представляет последовательность символов, заключенную в одинарные или двойные кавычки, например "hello" и 'hello'. В Python 3.x строки представляют набор символов в кодировке Unicode
#message = "Hello World!"
#print(message)  # Hello World!
# 
#name = 'Tom'
#print(name)  # Tom
При этом если строка имеет много символов, ее можем разбить ее на части и разместить их на разных строках кода. В этом случае вся строка заключается в круглые скобки, а ее отдельные части - в кавычки:
#text = ("Laudate omnes gentes laudate "
#        "Magnificat in secula ")
#print(text)
Если же мы хотим определить многострочный текст, то такой текст заключается в тройные двойные или одинарные кавычки:
#'''
#Это комментарий
#'''
#text = '''Laudate omnes gentes laudate
#Magnificat in secula
#Et anima mea laudate
#Magnificat in secula 
#'''
#print(text)
При использовани тройных одинарных кавычек не стоит путать их с комментариями: если текст в тройных одинарных кавычках присваивается переменной, то это строка, а не комментарий.
Строка может содержать ряд специальных символов - управляющих последовательностей. Некоторые из них:
-\: позволяет добавить внутрь строки слеш
-\': позволяет добавить внутрь строки одинарную кавычку
-\": позволяет добавить внутрь строки двойную кавычку
-\n: осуществляет переход на новую строку
-\t: добавляет табуляцию (4 отступа)
Применим несколько последовательностей:
#text = "Message:\n\"Hello World\""
#print(text)
Консольный вывод программы:
#Message:
#"Hello World"
Хотя подобные последовательности могут нам помочь в некоторых делах, например, поместить в строку кавычку, сделать табуляцию, перенос на другую строку. Но они также могут и мешать. Например:
#path = "C:\python\name.txt"
#print(path)
Здесь переменная path содержит некоторый путь к файлу. Однако внутри строки встречаются символы "\n", которые будут интерпретированы как управляющая последовательность. Так, мы получим следующий консольный вывод:
#C:\python
#ame.txt
Чтобы избежать подобной ситуации, перед строкой ставится символ r
#path = r"C:\python\name.txt"
#print(path)
Python позволяет встравивать в строку значения других переменных. Для этого внутри строки переменные размещаются в фигурных скобках {}, а перед всей строкой ставится символ f:
#userName = "Tom"
#userAge = 37
#user = f"name: {userName}  age: {userAge}"
#print(user)   # name: Tom  age: 37
В данном случае на место {userName} будет вставляться значение переменной userName. Аналогично на вместо {userAge} будет вставляться значение переменной userAge.
Python является языком с динамической типизацией. А это значит, что переменная не привязана жестко с определенному типу.
Тип переменной определяется исходя из значения, которое ей присвоено. Так, при присвоении строки в двойных или одинарных кавычках переменная имеет тип str. При присвоении целого числа Python автоматически определяет тип переменной как int. Чтобы определить переменную как объект float, ей присваивается дробное число, в котором разделителем целой и дробной части является точка.
При этом в процессе работы программы мы можем изменить тип переменной, присвоив ей значение другого типа:
#userId = "abc"  # тип str
#print(userId)
# 
#userId = 234  # тип int
#print(userId)
С помощью встроенной функции type() динамически можно узнать текущий тип переменной:
#userId = "abc"      # тип str
#print(type(userId)) # <class 'str'>
# 
#userId = 234        # тип int
#print(type(userId)) # <class 'int'>
@
@topic=Операторы;
Напишите программу, которая посчитает разность между числами 6 и -81 и выведет ответ на экран.
^
print(6 - -81)
@
@topic=Приоритет;
Дано вычисление 70 * 3 + 4 / 8 + 2.
Расставьте скобки так, чтобы оба сложения (3 + 4) и (8 + 2) высчитывались в первую очередь. Выведите на экран результат.
^
print (70 * (3 + 4) / (8 + 2))
@
@topic=Выражения в определениях;
Напишите программу, которая берет исходное количество евро, записанное в переменную euros_count, переводит евро в доллары и выводит на экран. Затем полученное значение переводит в рубли и выводит на новой строчке.
^
euros_count = 100

dollars_per_euro = 1.25
rubles_per_dollars = 60
dollars_count = euros_count * dollars_per_euro
rubles_count = dollars_count * rubles_per_dollars
print(str(dollars_count) + '\n' + str(rubles_count))
@
@topic=Что такое переменная;
Представьте себе задачу, нам нужно напечатать на экран фразу Father! два раза или даже пять раз. Эту задачу можно решить в лоб:
#print('Father!')
#print('Father!')
В простейшем случае так и стоит поступить, но если фраза Father! начнет использоваться чаще, да еще и в разных частях программы, то придется ее везде повторять. Проблемы с таким подходом начнутся тогда, когда понадобится изменить нашу фразу, а такое происходит довольно часто. Нам придется найти все места где использовалось фраза Father! и выполнить необходимую замену. А можно поступить по другому. Вместо копирования нашего выражения, достаточно создать переменную с этой фразой.
#greeting = 'Father!'
#print(greeting)
#print(greeting)
В строчке greeting = 'Father!' - происходит присваивание значения 'Father!' переменной с именем greeting. Переменная указывает на данные, которые были в неё записаны. Благодаря этому, данные можно использовать многократно без необходимости их постоянно дублировать.
Когда переменная создана, можно начать её использовать. Она подставляется в те места, где раньше стояла наша фраза. Во время выполнения кода, интерпретатор (то, что выполняет код на Python), доходит до строчки print(greeting) и подставляет вместо переменной её содержимое, а затем выполняет код. В результате вывод нашей программы будет таким:
#Father!
#Father!
Для имени переменной используется любой набор допустимых символов, к которым относятся буквы английского алфавита, цифры и знак _. При этом цифру нельзя ставить в начале. Имена переменных регистрозависимы, то есть имя hello и имя heLLo - это два разных имени, а значит и две переменные. Регистр в Python имеет важное значение, никогда не забывайте про него.
Количество создаваемых переменных никак не ограничено, большие программы содержат десятки и сотни тысяч имен переменных:
#greeting1 = 'Father!'
#print(greeting1)
#print(greeting1)
#
#greeting2 = 'Mother!'
#print(greeting2)
#print(greeting2)
Для удобства анализа программы, переменные принято создавать как можно ближе к тому месту где они используются.
@
@topic=Переменные и конкатенация;
Переменные полезны не только для хранения и переиспользования информации, но и для упрощения сложных вычислений. Давайте рассмотрим пример: нужно перевести евро в рубли через доллары. Подобные конвертации через промежуточную валюту часто делают банки при покупках за рубежом.
Для начала переведем 50 евро в доллары. Допустим, что один евро — 1.25 долларов:
#dollars_count = 50 * 1.25
#print(dollars_count)  # => 62.5
В предыдущем уроке мы записывали в переменную конкретное значение. А здесь dollars_count = 50 * 1.25 справа от знака равно находится выражение. Интерпретатор вычислит результат — 62.5 — и запишет его в переменную. С точки зрения интерпретатора не важно, что перед ним: 62.5 или 50 * 1.25, для него оба варианта — выражения, которые надо вычислить. И они вычисляются в одно и тоже значение — 62.5.
Любая строка — выражение. Конкатенация строк — тоже выражение. Когда интерпретатор видит выражение, он обрабатывает его и генерирует результат — значение выражения. Вот несколько примеров выражений, а в комментариях справа от каждого выражения — итоговое значение:
#62.5             # 62.5
#50 * 1.25        # 62.5
#120 / 10 * 2     # 24
#int('100')       # 100
#
#'hello'          # 'hello'
#'Good' + 'will'  # 'Goodwill'
Правила построения кода (грамматика языка) таковы, что в тех местах, где ожидается выражение, можно поставить любое вычисление (не только математическое, но и, например, строковое — как конкатенация), и программа останется работоспособной. По этой причине невозможно описать и показать все случаи использования всех операций.
Программы состоят из множества комбинаций выражений, и понимание этой концепции — один из ключевых шагов на вашем пути.
Запишем стоимость доллара в рублях, как отдельную переменную. Вычислим цену 50 евро в долларах, умножив их на 1.25. Допустим, что 1 доллар — 60 рублей:
#rubles_per_dollar = 60
#dollars_count = 50 * 1.25  # 62.5
#rubles_count = dollars_count * rubles_per_dollar  # 3750.0
#
#print(rubles_count)
А теперь давайте добавим к выводу текст с помощью конкатенации:
#rubles_per_dollar = 60
#dollars_count = 50 * 1.25  # 62.5
#rubles_count = dollars_count * rubles_per_dollar  # 3750.0
#
#print('The price is ' + str(rubles_count) + ' rubles')
Любая переменная может быть частью любого выражения. В момент вычисления вместо имени переменной подставляется её значение.
Интерпретатор вычисляет значение dollars_count до того, как эта переменная начнет использоваться в других выражениях. Когда подходит момент использования переменной, Python «знает» значение, потому что уже вычислил его.
Для закрепления предыдущей темы попробуем использовать переменные с конкатенацией. Синтаксически ничего не меняется: мы умеем конкатенировать (склеивать) две строки:
#what = "Kings" + "road"
#print(what)  # => "Kingsroad"
… а значит сумеем конкатенировать строку и одну переменную, в которой записана строка:
#first = "Kings"
#what = first + "road"
#
#print(what)  # => "Kingsroad"
… и даже конкатенировать две переменные, в которых записаны строки:
#first = "Kings"
#last = 'road'
#
#what = first + last
#print(what)  # => "Kingsroad"
@